name: CI
on:
  push:
    branches:
      - master
      - release-[1-9].*
  pull_request:
  pull_request_target:
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    name: ${{ matrix.os-name }}-${{ matrix.transport }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04 ]
        transport: [ Learning, RabbitMQ, AzureServiceBus, SqlServer, AmazonSQS ]
        include:
          - os: windows-2019
            os-name: Windows
          - os: ubuntu-20.04
            os-name: Linux
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Setup .NET Core 3.1 runtime
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        if: matrix.name == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Install SQL Server
        if: matrix.transport == 'SqlServer'
        uses: Particular/install-sql-server-action@v1.0.0
        with:
          connection-string-env-var: SqlServerTransportConnectionString
          catalog: nservicebus
      - name: Setup Azure Service Bus
        if: matrix.transport == 'AzureServiceBus'
        uses: Particular/setup-azureservicebus-action@v1.0.0
        with:
          connection-string-name: AzureServiceBus_ConnectionString
          tag: ASBTransportBridge
      - name: Setup AWS SDK environment
        if: matrix.transport == 'AmazonSQS'
        shell: pwsh
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "NSERVICEBUS_AMAZONSQS_S3BUCKET=${{ secrets.NSERVICEBUS_AMAZONSQS_S3BUCKET }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Setup RabbitMQ
        if: matrix.transport == 'RabbitMQ'
        uses: Particular/setup-rabbitmq-action@v1.0.0
        with:
          connection-string-name: RabbitMQTransport_ConnectionString
          tag: RabbitMQTransportBridge
      - name: Run tests
        uses: Particular/run-tests-action@v1.3.0