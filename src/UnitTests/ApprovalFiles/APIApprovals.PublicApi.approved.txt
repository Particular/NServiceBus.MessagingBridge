[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"UnitTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class BridgeConfiguration
    {
        public BridgeConfiguration() { }
        public NServiceBus.Transport.Bridge.TransportConfiguration AddTransport(NServiceBus.Transport.TransportDefinition transportDefinition, string name = null, int concurrency = 1, string errorQueue = "error", bool autoCreateQueues = true) { }
    }
    public static class HostBuilderExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBusBridge(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Action<NServiceBus.BridgeConfiguration> bridgeConfigurationAction) { }
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBusBridge(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, NServiceBus.BridgeConfiguration> bridgeConfigurationAction) { }
    }
}
namespace NServiceBus.Transport.Bridge
{
    public interface IStartableBridge
    {
        System.Threading.Tasks.Task<NServiceBus.Transport.Bridge.IStoppableBridge> Start(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IStoppableBridge
    {
        System.Threading.Tasks.Task Stop(System.Threading.CancellationToken cancellationToken = default);
    }
    public class TransportConfiguration
    {
        public TransportConfiguration(NServiceBus.Transport.TransportDefinition transportDefinition) { }
        public bool AutoCreateQueues { get; set; }
        public int Concurrency { get; set; }
        public string ErrorQueue { get; set; }
        public string Name { get; set; }
        public NServiceBus.Transport.TransportDefinition TransportDefinition { get; }
        public NServiceBus.Transport.Bridge.TransportConfiguration HasEndpoint(NServiceBus.Transport.QueueAddress queueAddress) { }
        public NServiceBus.Transport.Bridge.TransportConfiguration HasEndpoint(string endpoint) { }
        public NServiceBus.Transport.Bridge.TransportConfiguration RegisterPublisher(string eventTypeFullName, string publisher) { }
        public NServiceBus.Transport.Bridge.TransportConfiguration RegisterPublisher(System.Type eventType, string publisher) { }
        public class Endpoint
        {
            public Endpoint() { }
            public string Name { get; set; }
            public NServiceBus.Transport.QueueAddress QueueAddress { get; set; }
            public System.Collections.Generic.List<NServiceBus.Transport.Bridge.TransportConfiguration.Subscription> Subscriptions { get; set; }
        }
        public class Subscription
        {
            public Subscription() { }
            public string EventTypeFullName { get; set; }
            public string Publisher { get; set; }
        }
    }
}