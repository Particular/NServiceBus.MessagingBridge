[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"AcceptanceTesting, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"UnitTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class BridgeConfiguration
    {
        public BridgeConfiguration() { }
        public void AddTransport(NServiceBus.BridgeTransport transportConfiguration) { }
        public void DoNotEnforceBestPractices() { }
        public void DoNotTranslateReplyToAddressForFailedMessages() { }
        public void RunInReceiveOnlyTransactionMode() { }
        [System.Obsolete("The bridge now translates ReplyTo addresses for failed messages by default. To op" +
            "t out, use DoNotTranslateReplyToAddressForFailedMessages. Will be removed in ver" +
            "sion 5.0.0.", true)]
        public void TranslateReplyToAddressForFailedMessages() { }
    }
    public class BridgeEndpoint
    {
        public BridgeEndpoint(string name) { }
        public BridgeEndpoint(string name, string queueAddress) { }
        public void RegisterPublisher(string eventTypeAssemblyQualifiedName, string publisher) { }
        public void RegisterPublisher(System.Type eventType, string publisher) { }
        public void RegisterPublisher<T>(string publisher) { }
    }
    public class BridgeTransport
    {
        public BridgeTransport(NServiceBus.Transport.TransportDefinition transportDefinition) { }
        public bool AutoCreateQueues { get; set; }
        public int Concurrency { get; set; }
        public string ErrorQueue { get; set; }
        public string Name { get; set; }
        public void HasEndpoint(NServiceBus.BridgeEndpoint endpoint) { }
        public void HasEndpoint(string endpointName) { }
        public void HasEndpoint(string endpointName, string endpointAddress) { }
        public void ReportCustomChecksTo(string serviceControlQueue, System.TimeSpan? timeToLive = default) { }
        public void SendHeartbeatTo(string serviceControlQueue, System.TimeSpan? frequency = default, System.TimeSpan? timeToLive = default) { }
    }
    public class CheckResult
    {
        public static NServiceBus.CheckResult Pass;
        public CheckResult() { }
        public string FailureReason { get; set; }
        public bool HasFailed { get; set; }
        public static NServiceBus.CheckResult Failed(string reason) { }
        public static System.Threading.Tasks.Task<NServiceBus.CheckResult> op_Implicit(NServiceBus.CheckResult result) { }
    }
    public abstract class CustomCheck : NServiceBus.ICustomCheck
    {
        protected CustomCheck(string id, string category, System.TimeSpan? repeatAfter = default) { }
        public string Category { get; }
        public string Id { get; }
        public System.TimeSpan? Interval { get; }
        public abstract System.Threading.Tasks.Task<NServiceBus.CheckResult> PerformCheck(System.Threading.CancellationToken cancellationToken = default);
    }
    public static class HostApplicationBuilderExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostApplicationBuilder UseNServiceBusBridge(this Microsoft.Extensions.Hosting.IHostApplicationBuilder builder, NServiceBus.BridgeConfiguration bridgeConfiguration) { }
    }
    public static class HostBuilderExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBusBridge(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Action<NServiceBus.BridgeConfiguration> bridgeConfigurationAction) { }
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBusBridge(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, NServiceBus.BridgeConfiguration> bridgeConfigurationAction) { }
    }
    public interface ICustomCheck
    {
        string Category { get; }
        string Id { get; }
        System.TimeSpan? Interval { get; }
        System.Threading.Tasks.Task<NServiceBus.CheckResult> PerformCheck(System.Threading.CancellationToken cancellationToken = default);
    }
}